[
    {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "## 8. Voting Classifier"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "Exercise: _Load the MNIST data and split it into a training set, a validation set, and a test set (e.g., use 50,000 instances for training, 10,000 for validation, and 10,000 for testing)._"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "The MNIST dataset was loaded earlier."
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 55,
    "metadata": {},
    "outputs": [],
    "source": [
     "from sklearn.model_selection import train_test_split"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 56,
    "metadata": {},
    "outputs": [],
    "source": [
     "X_train_val, X_test, y_train_val, y_test = train_test_split(\n",
     "    mnist.data, mnist.target, test_size=10000, random_state=42)\n",
     "X_train, X_val, y_train, y_val = train_test_split(\n",
     "    X_train_val, y_train_val, test_size=10000, random_state=42)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "Exercise: _Then train various classifiers, such as a Random Forest classifier, an Extra-Trees classifier, and an SVM._"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 57,
    "metadata": {},
    "outputs": [],
    "source": [
     "from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\n",
     "from sklearn.svm import LinearSVC\n",
     "from sklearn.neural_network import MLPClassifier"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 58,
    "metadata": {},
    "outputs": [],
    "source": [
     "random_forest_clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
     "extra_trees_clf = ExtraTreesClassifier(n_estimators=100, random_state=42)\n",
     "svm_clf = LinearSVC(max_iter=100, tol=20, random_state=42)\n",
     "mlp_clf = MLPClassifier(random_state=42)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 59,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
       "Training the RandomForestClassifier(random_state=42)\n",
       "Training the ExtraTreesClassifier(random_state=42)\n",
       "Training the LinearSVC(max_iter=100, random_state=42, tol=20)\n",
       "Training the MLPClassifier(random_state=42)\n"
      ]
     }
    ],
    "source": [
     "estimators = [random_forest_clf, extra_trees_clf, svm_clf, mlp_clf]\n",
     "for estimator in estimators:\n",
     "    print(\"Training the\", estimator)\n",
     "    estimator.fit(X_train, y_train)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 60,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "[0.9692, 0.9715, 0.859, 0.9639]"
       ]
      },
      "execution_count": 60,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "[estimator.score(X_val, y_val) for estimator in estimators]"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "The linear SVM is far outperformed by the other classifiers. However, let's keep it for now since it may improve the voting classifier's performance."
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "Exercise: _Next, try to combine them into an ensemble that outperforms them all on the validation set, using a soft or hard voting classifier._"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 61,
    "metadata": {},
    "outputs": [],
    "source": [
     "from sklearn.ensemble import VotingClassifier"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 62,
    "metadata": {},
    "outputs": [],
    "source": [
     "named_estimators = [\n",
     "    (\"random_forest_clf\", random_forest_clf),\n",
     "    (\"extra_trees_clf\", extra_trees_clf),\n",
     "    (\"svm_clf\", svm_clf),\n",
     "    (\"mlp_clf\", mlp_clf),\n",
     "]"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 63,
    "metadata": {},
    "outputs": [],
    "source": [
     "voting_clf = VotingClassifier(named_estimators)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 64,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "VotingClassifier(estimators=[('random_forest_clf',\n",
        "                              RandomForestClassifier(random_state=42)),\n",
        "                             ('extra_trees_clf',\n",
        "                              ExtraTreesClassifier(random_state=42)),\n",
        "                             ('svm_clf',\n",
        "                              LinearSVC(max_iter=100, random_state=42, tol=20)),\n",
        "                             ('mlp_clf', MLPClassifier(random_state=42))])"
       ]
      },
      "execution_count": 64,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "voting_clf.fit(X_train, y_train)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 65,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "0.9711"
       ]
      },
      "execution_count": 65,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "voting_clf.score(X_val, y_val)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 66,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "[0.9692, 0.9715, 0.859, 0.9639]"
       ]
      },
      "execution_count": 66,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "[estimator.score(X_val, y_val) for estimator in voting_clf.estimators_]"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "Let's remove the SVM to see if performance improves. It is possible to remove an estimator by setting it to `None` using `set_params()` like this:"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 67,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "VotingClassifier(estimators=[('random_forest_clf',\n",
        "                              RandomForestClassifier(random_state=42)),\n",
        "                             ('extra_trees_clf',\n",
        "                              ExtraTreesClassifier(random_state=42)),\n",
        "                             ('svm_clf', None),\n",
        "                             ('mlp_clf', MLPClassifier(random_state=42))])"
       ]
      },
      "execution_count": 67,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "voting_clf.set_params(svm_clf=None)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "This updated the list of estimators:"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 68,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "[('random_forest_clf', RandomForestClassifier(random_state=42)),\n",
        " ('extra_trees_clf', ExtraTreesClassifier(random_state=42)),\n",
        " ('svm_clf', None),\n",
        " ('mlp_clf', MLPClassifier(random_state=42))]"
       ]
      },
      "execution_count": 68,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "voting_clf.estimators"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "However, it did not update the list of _trained_ estimators:"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 69,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "[RandomForestClassifier(random_state=42),\n",
        " ExtraTreesClassifier(random_state=42),\n",
        " LinearSVC(max_iter=100, random_state=42, tol=20),\n",
        " MLPClassifier(random_state=42)]"
       ]
      },
      "execution_count": 69,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "voting_clf.estimators_"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "So we can either fit the `VotingClassifier` again, or just remove the SVM from the list of trained estimators:"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 70,
    "metadata": {},
    "outputs": [],
    "source": [
     "del voting_clf.estimators_[2]"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "Now let's evaluate the `VotingClassifier` again:"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 71,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "0.9735"
       ]
      },
      "execution_count": 71,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "voting_clf.score(X_val, y_val)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "A bit better! The SVM was hurting performance. Now let's try using a soft voting classifier. We do not actually need to retrain the classifier, we can just set `voting` to `\"soft\"`:"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 72,
    "metadata": {},
    "outputs": [],
    "source": [
     "voting_clf.voting = \"soft\""
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 73,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "0.9693"
       ]
      },
      "execution_count": 73,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "voting_clf.score(X_val, y_val)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "Nope, hard voting wins in this case."
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "_Once you have found one, try it on the test set. How much better does it perform compared to the individual classifiers?_"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 74,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "0.9706"
       ]
      },
      "execution_count": 74,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "voting_clf.voting = \"hard\"\n",
     "voting_clf.score(X_test, y_test)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 75,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "[0.9645, 0.9691, 0.9624]"
       ]
      },
      "execution_count": 75,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "[estimator.score(X_test, y_test) for estimator in voting_clf.estimators_]"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "The voting classifier only very slightly reduced the error rate of the best model in this case."
    ]
   }
]