[
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "a. Generate a moons dataset using `make_moons(n_samples=10000, noise=0.4)`."
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "Adding `random_state=42` to make this notebook's output constant:"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 18,
    "metadata": {},
    "outputs": [],
    "source": [
     "from sklearn.datasets import make_moons\n",
     "\n",
     "X, y = make_moons(n_samples=10000, noise=0.4, random_state=42)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "b. Split it into a training set and a test set using `train_test_split()`."
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 19,
    "metadata": {},
    "outputs": [],
    "source": [
     "from sklearn.model_selection import train_test_split\n",
     "\n",
     "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "c. Use grid search with cross-validation (with the help of the `GridSearchCV` class) to find good hyperparameter values for a `DecisionTreeClassifier`. Hint: try various values for `max_leaf_nodes`."
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 20,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
       "Fitting 3 folds for each of 294 candidates, totalling 882 fits\n"
      ]
     },
     {
      "name": "stderr",
      "output_type": "stream",
      "text": [
       "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
       "[Parallel(n_jobs=1)]: Done 882 out of 882 | elapsed:    5.7s finished\n"
      ]
     },
     {
      "data": {
       "text/plain": [
        "GridSearchCV(cv=3, estimator=DecisionTreeClassifier(random_state=42),\n",
        "             param_grid={'max_leaf_nodes': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n",
        "                                            13, 14, 15, 16, 17, 18, 19, 20, 21,\n",
        "                                            22, 23, 24, 25, 26, 27, 28, 29, 30,\n",
        "                                            31, ...],\n",
        "                         'min_samples_split': [2, 3, 4]},\n",
        "             verbose=1)"
       ]
      },
      "execution_count": 20,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "from sklearn.model_selection import GridSearchCV\n",
     "\n",
     "params = {'max_leaf_nodes': list(range(2, 100)), 'min_samples_split': [2, 3, 4]}\n",
     "grid_search_cv = GridSearchCV(DecisionTreeClassifier(random_state=42), params, verbose=1, cv=3)\n",
     "\n",
     "grid_search_cv.fit(X_train, y_train)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 21,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "DecisionTreeClassifier(max_leaf_nodes=17, random_state=42)"
       ]
      },
      "execution_count": 21,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "grid_search_cv.best_estimator_"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "d. Train it on the full training set using these hyperparameters, and measure your model's performance on the test set. You should get roughly 85% to 87% accuracy."
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "By default, `GridSearchCV` trains the best model found on the whole training set (you can change this by setting `refit=False`), so we don't need to do it again. We can simply evaluate the model's accuracy:"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 22,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "0.8695"
       ]
      },
      "execution_count": 22,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "from sklearn.metrics import accuracy_score\n",
     "\n",
     "y_pred = grid_search_cv.predict(X_test)\n",
     "accuracy_score(y_test, y_pred)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "## 8."
    ]
   }
 ]  