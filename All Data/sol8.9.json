[
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "The MNIST dataset was loaded earlier."
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 73,
    "metadata": {},
    "outputs": [],
    "source": [
     "X_train = mnist['data'][:60000]\n",
     "y_train = mnist['target'][:60000]\n",
     "\n",
     "X_test = mnist['data'][60000:]\n",
     "y_test = mnist['target'][60000:]"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "*Exercise: Train a Random Forest classifier on the dataset and time how long it takes, then evaluate the resulting model on the test set.*"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 74,
    "metadata": {},
    "outputs": [],
    "source": [
     "from sklearn.ensemble import RandomForestClassifier\n",
     "\n",
     "rnd_clf = RandomForestClassifier(n_estimators=100, random_state=42)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 75,
    "metadata": {},
    "outputs": [],
    "source": [
     "import time\n",
     "\n",
     "t0 = time.time()\n",
     "rnd_clf.fit(X_train, y_train)\n",
     "t1 = time.time()"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 76,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
       "Training took 35.27s\n"
      ]
     }
    ],
    "source": [
     "print(\"Training took {:.2f}s\".format(t1 - t0))"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 77,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "0.9705"
       ]
      },
      "execution_count": 77,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "from sklearn.metrics import accuracy_score\n",
     "\n",
     "y_pred = rnd_clf.predict(X_test)\n",
     "accuracy_score(y_test, y_pred)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "*Exercise: Next, use PCA to reduce the dataset's dimensionality, with an explained variance ratio of 95%.*"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 78,
    "metadata": {},
    "outputs": [],
    "source": [
     "from sklearn.decomposition import PCA\n",
     "\n",
     "pca = PCA(n_components=0.95)\n",
     "X_train_reduced = pca.fit_transform(X_train)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "*Exercise: Train a new Random Forest classifier on the reduced dataset and see how long it takes. Was training much faster?*"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 79,
    "metadata": {},
    "outputs": [],
    "source": [
     "rnd_clf2 = RandomForestClassifier(n_estimators=100, random_state=42)\n",
     "t0 = time.time()\n",
     "rnd_clf2.fit(X_train_reduced, y_train)\n",
     "t1 = time.time()"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 80,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
       "Training took 81.03s\n"
      ]
     }
    ],
    "source": [
     "print(\"Training took {:.2f}s\".format(t1 - t0))"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "Oh no! Training is actually more than twice slower now! How can that be? Well, as we saw in this chapter, dimensionality reduction does not always lead to faster training time: it depends on the dataset, the model and the training algorithm. See figure 8-6 (the `manifold_decision_boundary_plot*` plots above). If you try a softmax classifier instead of a random forest classifier, you will find that training time is reduced by a factor of 3 when using PCA. Actually, we will do this in a second, but first let's check the precision of the new random forest classifier."
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "*Exercise: Next evaluate the classifier on the test set: how does it compare to the previous classifier?*"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 81,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "0.9481"
       ]
      },
      "execution_count": 81,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "X_test_reduced = pca.transform(X_test)\n",
     "\n",
     "y_pred = rnd_clf2.predict(X_test_reduced)\n",
     "accuracy_score(y_test, y_pred)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "It is common for performance to drop slightly when reducing dimensionality, because we do lose some useful signal in the process. However, the performance drop is rather severe in this case. So PCA really did not help: it slowed down training and reduced performance. :(\n",
     "\n",
     "Let's see if it helps when using softmax regression:"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 82,
    "metadata": {},
    "outputs": [
     {
      "name": "stderr",
      "output_type": "stream",
      "text": [
       "/Users/ageron/miniconda3/envs/tf2/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py:764: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
       "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
       "\n",
       "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
       "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
       "Please also refer to the documentation for alternative solver options:\n",
       "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
       "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
      ]
     }
    ],
    "source": [
     "from sklearn.linear_model import LogisticRegression\n",
     "\n",
     "log_clf = LogisticRegression(multi_class=\"multinomial\", solver=\"lbfgs\", random_state=42)\n",
     "t0 = time.time()\n",
     "log_clf.fit(X_train, y_train)\n",
     "t1 = time.time()"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 83,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
       "Training took 18.39s\n"
      ]
     }
    ],
    "source": [
     "print(\"Training took {:.2f}s\".format(t1 - t0))"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 84,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "0.9255"
       ]
      },
      "execution_count": 84,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "y_pred = log_clf.predict(X_test)\n",
     "accuracy_score(y_test, y_pred)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "Okay, so softmax regression takes much longer to train on this dataset than the random forest classifier, plus it performs worse on the test set. But that's not what we are interested in right now, we want to see how much PCA can help softmax regression. Let's train the softmax regression model using the reduced dataset:"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 85,
    "metadata": {},
    "outputs": [
     {
      "name": "stderr",
      "output_type": "stream",
      "text": [
       "/Users/ageron/miniconda3/envs/tf2/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py:764: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
       "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
       "\n",
       "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
       "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
       "Please also refer to the documentation for alternative solver options:\n",
       "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
       "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
      ]
     }
    ],
    "source": [
     "log_clf2 = LogisticRegression(multi_class=\"multinomial\", solver=\"lbfgs\", random_state=42)\n",
     "t0 = time.time()\n",
     "log_clf2.fit(X_train_reduced, y_train)\n",
     "t1 = time.time()"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 86,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
       "Training took 6.94s\n"
      ]
     }
    ],
    "source": [
     "print(\"Training took {:.2f}s\".format(t1 - t0))"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "Nice! Reducing dimensionality led to over 2× speedup. :)  Let's check the model's accuracy:"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 87,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "0.9201"
       ]
      },
      "execution_count": 87,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "y_pred = log_clf2.predict(X_test_reduced)\n",
     "accuracy_score(y_test, y_pred)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "A very slight drop in performance, which might be a reasonable price to pay for a 2× speedup, depending on the application."
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "So there you have it: PCA can give you a formidable speedup... but not always!"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "## 10."
    ]
   }
]