[
    {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "# 9."
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "_Exercise: train an SVM classifier on the MNIST dataset. Since SVM classifiers are binary classifiers, you will need to use one-versus-all to classify all 10 digits. You may want to tune the hyperparameters using small validation sets to speed up the process. What accuracy can you reach?_"
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "First, let's load the dataset and split it into a training set and a test set. We could use `train_test_split()` but people usually just take the first 60,000 instances for the training set, and the last 10,000 instances for the test set (this makes it possible to compare your model's performance with others): "
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "**Warning:** since Scikit-Learn 0.24, `fetch_openml()` returns a Pandas `DataFrame` by default. To avoid this, we use `as_frame=False`."
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 47,
        "metadata": {},
        "outputs": [],
        "source": [
         "from sklearn.datasets import fetch_openml\n",
         "mnist = fetch_openml('mnist_784', version=1, cache=True, as_frame=False)\n",
         "\n",
         "X = mnist[\"data\"]\n",
         "y = mnist[\"target\"].astype(np.uint8)\n",
         "\n",
         "X_train = X[:60000]\n",
         "y_train = y[:60000]\n",
         "X_test = X[60000:]\n",
         "y_test = y[60000:]"
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "Many training algorithms are sensitive to the order of the training instances, so it's generally good practice to shuffle them first. However, the dataset is already shuffled, so we do not need to do it."
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "Let's start simple, with a linear SVM classifier. It will automatically use the One-vs-All (also called One-vs-the-Rest, OvR) strategy, so there's nothing special we need to do. Easy!\n",
         "\n",
         "**Warning**: this may take a few minutes depending on your hardware."
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 48,
        "metadata": {},
        "outputs": [
         {
          "name": "stderr",
          "output_type": "stream",
          "text": [
           "/Users/ageron/miniconda3/envs/tf2/lib/python3.7/site-packages/sklearn/svm/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
           "  \"the number of iterations.\", ConvergenceWarning)\n"
          ]
         },
         {
          "data": {
           "text/plain": [
            "LinearSVC(random_state=42)"
           ]
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "lin_clf = LinearSVC(random_state=42)\n",
         "lin_clf.fit(X_train, y_train)"
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "Let's make predictions on the training set and measure the accuracy (we don't want to measure it on the test set yet, since we have not selected and trained the final model yet):"
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 49,
        "metadata": {},
        "outputs": [
         {
          "data": {
           "text/plain": [
            "0.8348666666666666"
           ]
          },
          "execution_count": 49,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "from sklearn.metrics import accuracy_score\n",
         "\n",
         "y_pred = lin_clf.predict(X_train)\n",
         "accuracy_score(y_train, y_pred)"
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "Okay, 83.5% accuracy on MNIST is pretty bad. This linear model is certainly too simple for MNIST, but perhaps we just needed to scale the data first:"
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 50,
        "metadata": {},
        "outputs": [],
        "source": [
         "scaler = StandardScaler()\n",
         "X_train_scaled = scaler.fit_transform(X_train.astype(np.float32))\n",
         "X_test_scaled = scaler.transform(X_test.astype(np.float32))"
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "**Warning**: this may take a few minutes depending on your hardware."
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 51,
        "metadata": {},
        "outputs": [
         {
          "name": "stderr",
          "output_type": "stream",
          "text": [
           "/Users/ageron/miniconda3/envs/tf2/lib/python3.7/site-packages/sklearn/svm/_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
           "  \"the number of iterations.\", ConvergenceWarning)\n"
          ]
         },
         {
          "data": {
           "text/plain": [
            "LinearSVC(random_state=42)"
           ]
          },
          "execution_count": 51,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "lin_clf = LinearSVC(random_state=42)\n",
         "lin_clf.fit(X_train_scaled, y_train)"
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 52,
        "metadata": {},
        "outputs": [
         {
          "data": {
           "text/plain": [
            "0.9217333333333333"
           ]
          },
          "execution_count": 52,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "y_pred = lin_clf.predict(X_train_scaled)\n",
         "accuracy_score(y_train, y_pred)"
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "That's much better (we cut the error rate by about 53%), but still not great at all for MNIST. If we want to use an SVM, we will have to use a kernel. Let's try an `SVC` with an RBF kernel (the default)."
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "**Note**: to be future-proof we set `gamma=\"scale\"` since it will be the default value in Scikit-Learn 0.22."
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 53,
        "metadata": {},
        "outputs": [
         {
          "data": {
           "text/plain": [
            "SVC()"
           ]
          },
          "execution_count": 53,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "svm_clf = SVC(gamma=\"scale\")\n",
         "svm_clf.fit(X_train_scaled[:10000], y_train[:10000])"
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 54,
        "metadata": {},
        "outputs": [
         {
          "data": {
           "text/plain": [
            "0.9455333333333333"
           ]
          },
          "execution_count": 54,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "y_pred = svm_clf.predict(X_train_scaled)\n",
         "accuracy_score(y_train, y_pred)"
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "That's promising, we get better performance even though we trained the model on 6 times less data. Let's tune the hyperparameters by doing a randomized search with cross validation. We will do this on a small dataset just to speed up the process:"
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 55,
        "metadata": {},
        "outputs": [
         {
          "name": "stdout",
          "output_type": "stream",
          "text": [
           "Fitting 3 folds for each of 10 candidates, totalling 30 fits\n",
           "[CV] C=5.847490967837556, gamma=0.004375955271336425 .................\n"
          ]
         },
         {
          "name": "stderr",
          "output_type": "stream",
          "text": [
           "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
          ]
         },
         {
          "name": "stdout",
          "output_type": "stream",
          "text": [
           "[CV] .. C=5.847490967837556, gamma=0.004375955271336425, total=   0.8s\n",
           "[CV] C=5.847490967837556, gamma=0.004375955271336425 .................\n"
          ]
         },
         {
          "name": "stderr",
          "output_type": "stream",
          "text": [
           "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.8s remaining:    0.0s\n"
          ]
         },
         {
          "name": "stdout",
          "output_type": "stream",
          "text": [
           "[CV] .. C=5.847490967837556, gamma=0.004375955271336425, total=   0.8s\n",
           "[CV] C=5.847490967837556, gamma=0.004375955271336425 .................\n",
           "[CV] .. C=5.847490967837556, gamma=0.004375955271336425, total=   0.8s\n",
           "[CV] C=2.544266730893301, gamma=0.024987648190235304 .................\n",
           "[CV] .. C=2.544266730893301, gamma=0.024987648190235304, total=   0.9s\n",
           "[CV] C=2.544266730893301, gamma=0.024987648190235304 .................\n",
           "[CV] .. C=2.544266730893301, gamma=0.024987648190235304, total=   0.9s\n",
           "[CV] C=2.544266730893301, gamma=0.024987648190235304 .................\n",
           "[CV] .. C=2.544266730893301, gamma=0.024987648190235304, total=   0.9s\n",
           "[CV] C=2.199505425963898, gamma=0.009340106304825553 .................\n",
           "[CV] .. C=2.199505425963898, gamma=0.009340106304825553, total=   0.8s\n",
           "[CV] C=2.199505425963898, gamma=0.009340106304825553 .................\n",
           "[CV] .. C=2.199505425963898, gamma=0.009340106304825553, total=   0.8s\n",
           "[CV] C=2.199505425963898, gamma=0.009340106304825553 .................\n",
           "[CV] .. C=2.199505425963898, gamma=0.009340106304825553, total=   0.9s\n",
           "[CV] C=7.327377306009368, gamma=0.04329656504133618 ..................\n",
           "[CV] ... C=7.327377306009368, gamma=0.04329656504133618, total=   0.9s\n",
           "[CV] C=7.327377306009368, gamma=0.04329656504133618 ..................\n",
           "[CV] ... C=7.327377306009368, gamma=0.04329656504133618, total=   0.9s\n",
           "[CV] C=7.327377306009368, gamma=0.04329656504133618 ..................\n",
           "[CV] ... C=7.327377306009368, gamma=0.04329656504133618, total=   0.9s\n",
           "[CV] C=7.830259944094713, gamma=0.009933958471354695 .................\n",
           "[CV] .. C=7.830259944094713, gamma=0.009933958471354695, total=   0.9s\n",
           "[CV] C=7.830259944094713, gamma=0.009933958471354695 .................\n",
           "[CV] .. C=7.830259944094713, gamma=0.009933958471354695, total=   0.9s\n",
           "[CV] C=7.830259944094713, gamma=0.009933958471354695 .................\n",
           "[CV] .. C=7.830259944094713, gamma=0.009933958471354695, total=   0.9s\n",
           "[CV] C=6.867969780001033, gamma=0.027511132256566175 .................\n",
           "[CV] .. C=6.867969780001033, gamma=0.027511132256566175, total=   0.9s\n",
           "[CV] C=6.867969780001033, gamma=0.027511132256566175 .................\n",
           "[CV] .. C=6.867969780001033, gamma=0.027511132256566175, total=   0.9s\n",
           "[CV] C=6.867969780001033, gamma=0.027511132256566175 .................\n",
           "[CV] .. C=6.867969780001033, gamma=0.027511132256566175, total=   0.9s\n",
           "[CV] C=3.584980864373988, gamma=0.01237128009623357 ..................\n",
           "[CV] ... C=3.584980864373988, gamma=0.01237128009623357, total=   0.9s\n",
           "[CV] C=3.584980864373988, gamma=0.01237128009623357 ..................\n",
           "[CV] ... C=3.584980864373988, gamma=0.01237128009623357, total=   0.9s\n",
           "[CV] C=3.584980864373988, gamma=0.01237128009623357 ..................\n",
           "[CV] ... C=3.584980864373988, gamma=0.01237128009623357, total=   0.9s\n",
           "[CV] C=5.073078322899452, gamma=0.002259275783824143 .................\n",
           "[CV] .. C=5.073078322899452, gamma=0.002259275783824143, total=   0.7s\n",
           "[CV] C=5.073078322899452, gamma=0.002259275783824143 .................\n",
           "[CV] .. C=5.073078322899452, gamma=0.002259275783824143, total=   0.7s\n",
           "[CV] C=5.073078322899452, gamma=0.002259275783824143 .................\n",
           "[CV] .. C=5.073078322899452, gamma=0.002259275783824143, total=   0.7s\n",
           "[CV] C=10.696324058267928, gamma=0.0039267813006514255 ...............\n",
           "[CV]  C=10.696324058267928, gamma=0.0039267813006514255, total=   0.8s\n",
           "[CV] C=10.696324058267928, gamma=0.0039267813006514255 ...............\n",
           "[CV]  C=10.696324058267928, gamma=0.0039267813006514255, total=   0.8s\n",
           "[CV] C=10.696324058267928, gamma=0.0039267813006514255 ...............\n",
           "[CV]  C=10.696324058267928, gamma=0.0039267813006514255, total=   0.8s\n",
           "[CV] C=3.8786881587000437, gamma=0.0017076019229344522 ...............\n",
           "[CV]  C=3.8786881587000437, gamma=0.0017076019229344522, total=   0.7s\n",
           "[CV] C=3.8786881587000437, gamma=0.0017076019229344522 ...............\n",
           "[CV]  C=3.8786881587000437, gamma=0.0017076019229344522, total=   0.7s\n",
           "[CV] C=3.8786881587000437, gamma=0.0017076019229344522 ...............\n",
           "[CV]  C=3.8786881587000437, gamma=0.0017076019229344522, total=   0.7s\n"
          ]
         },
         {
          "name": "stderr",
          "output_type": "stream",
          "text": [
           "[Parallel(n_jobs=1)]: Done  30 out of  30 | elapsed:   24.8s finished\n"
          ]
         },
         {
          "data": {
           "text/plain": [
            "RandomizedSearchCV(cv=3, estimator=SVC(),\n",
            "                   param_distributions={'C': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7f93b0a61990>,\n",
            "                                        'gamma': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7f93b0a61850>},\n",
            "                   verbose=2)"
           ]
          },
          "execution_count": 55,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "from sklearn.model_selection import RandomizedSearchCV\n",
         "from scipy.stats import reciprocal, uniform\n",
         "\n",
         "param_distributions = {\"gamma\": reciprocal(0.001, 0.1), \"C\": uniform(1, 10)}\n",
         "rnd_search_cv = RandomizedSearchCV(svm_clf, param_distributions, n_iter=10, verbose=2, cv=3)\n",
         "rnd_search_cv.fit(X_train_scaled[:1000], y_train[:1000])"
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 56,
        "metadata": {},
        "outputs": [
         {
          "data": {
           "text/plain": [
            "SVC(C=3.8786881587000437, gamma=0.0017076019229344522)"
           ]
          },
          "execution_count": 56,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "rnd_search_cv.best_estimator_"
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 57,
        "metadata": {},
        "outputs": [
         {
          "data": {
           "text/plain": [
            "0.8599947252641863"
           ]
          },
          "execution_count": 57,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "rnd_search_cv.best_score_"
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "This looks pretty low but remember we only trained the model on 1,000 instances. Let's retrain the best estimator on the whole training set:"
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "**Warning**: the following cell may take hours to run, depending on your hardware."
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 58,
        "metadata": {},
        "outputs": [
         {
          "data": {
           "text/plain": [
            "SVC(C=3.8786881587000437, gamma=0.0017076019229344522)"
           ]
          },
          "execution_count": 58,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "rnd_search_cv.best_estimator_.fit(X_train_scaled, y_train)"
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 59,
        "metadata": {},
        "outputs": [
         {
          "data": {
           "text/plain": [
            "0.9978166666666667"
           ]
          },
          "execution_count": 59,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "y_pred = rnd_search_cv.best_estimator_.predict(X_train_scaled)\n",
         "accuracy_score(y_train, y_pred)"
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "Ah, this looks good! Let's select this model. Now we can test it on the test set:"
        ]
       },
       {
        "cell_type": "code",
        "execution_count": 60,
        "metadata": {},
        "outputs": [
         {
          "data": {
           "text/plain": [
            "0.9717"
           ]
          },
          "execution_count": 60,
          "metadata": {},
          "output_type": "execute_result"
         }
        ],
        "source": [
         "y_pred = rnd_search_cv.best_estimator_.predict(X_test_scaled)\n",
         "accuracy_score(y_test, y_pred)"
        ]
       },
       {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
         "Not too bad, but apparently the model is overfitting slightly. It's tempting to tweak the hyperparameters a bit more (e.g. decreasing `C` and/or `gamma`), but we would run the risk of overfitting the test set. Other people have found that the hyperparameters `C=5` and `gamma=0.005` yield even better performance (over 98% accuracy). By running the randomized search for longer and on a larger part of the training set, you may be able to find this as well."
        ]
       }
    ]