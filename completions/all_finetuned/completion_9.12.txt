 from sklearn.datasets import fetch_olivetti_faces

olivetti = fetch_olivetti_faces()

X = olivetti["data"]

y = olivetti["target"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)
X_train = X_train.astype("float32")
X_test = X_test.astype("float32")

from sklearn.model_selection import KFold

n_splits = 5

scores = KFold(X_train, y_train, n_splits=n_splits, random_state=42)

for train_index, test_index in scores:
    X_train_full = X_train[train_index]
    X_test_full = X_test[test_index]
    model = GaXGBClassifier(max_iter=100, random_state=42)
    model.fit(X_train_full, y_train)
    print(X_train_full.shape, X_test_full.shape)
    print(model.score(X_test_full, y_test))

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_train, model.predict(X_train))
print(mse)

from sklearn.model_selection import RandomizedSearchCV

param_distributions = {"max_iter": ["uniform", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt", " reciprocal_log", " reciprocal_sqrt_log", " reciprocal_log_sqrt", "log_sqrt", "sqrt", "log", " reciprocal", " reciprocal_sqrt